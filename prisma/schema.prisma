generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  type              String    @map("provider_type")
  provider          String    @map("provider_id")
  providerAccountId String    @map("provider_account_id")
  refreshToken      String?   @map("refresh_token")
  accessToken       String?   @map("access_token")
  expires_in        DateTime? @map("access_token_expires")
  expires_at        Int?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([providerAccountId], map: "providerAccountId")
  @@index([userId], map: "userId")
  @@map("accounts")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique(map: "users.email_unique")
  emailVerified DateTime?    @map("email_verified")
  image         String?
  admin         Boolean      @default(false)
  accounts      Account[]
  sessions      Session[]
  permission    Permission[]
  ownerships    Ownership[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String?  @unique @map("session_token")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "verification_requests.token_unique")
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_requests")
}

model Web {
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  id          Int          @id @default(autoincrement())
  title       String       @unique
  slug        String       @unique
  categories  Category[]
  listings    Listing[]
  tags        Tag[]
  published   Boolean      @default(false)
  image       String?
  permissions Permission[]
  ownerships  Ownership[]

  @@map("Location")
}

model Category {
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  label     String
  color     String?   @default("f1f1f1")
  id        Int       @id @default(autoincrement())
  webId     Int?
  web       Web?      @relation(fields: [webId], references: [id])
  listings  Listing[]

  @@unique([webId, label], name: "categoryIdentifier")
  @@map("categories")
}

model Tag {
  id       Int       @id @default(autoincrement())
  label    String
  webId    Int?
  web      Web?      @relation(fields: [webId], references: [id])
  listings Listing[]

  @@unique([webId, label], name: "tagIdentifier")
  @@map("tags")
}

model Listing {
  id                Int          @id @default(autoincrement())
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @default(now()) @updatedAt @map("updated_at")
  title             String
  website           String?
  description       String?
  facebook          String?
  twitter           String?
  instagram         String?
  email             String?
  notes             String?
  inactive          Boolean      @default(false)
  seekingVolunteers Boolean?     @map("seeking_volunteers")
  categoryId        Int?
  image             String?
  slug              String
  webId             Int
  web               Web?         @relation(fields: [webId], references: [id])
  category          Category?    @relation(fields: [categoryId], references: [id])
  permissions       Permission[]
  tags              Tag[]
  relations         Listing[]    @relation("related")
  relationOf        Listing[]    @relation("related")
  pending           Boolean      @default(false)

  @@unique([webId, slug])
  @@map("listings")
}

model Permission {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  email     String    @unique
  user      User?     @relation(fields: [email], references: [email])
  webs      Web[]
  listings  Listing[]
}

model Ownership {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  email     String   @unique
  user      User?    @relation(fields: [email], references: [email])
  webs      Web[]

  @@map("ownership")
}
